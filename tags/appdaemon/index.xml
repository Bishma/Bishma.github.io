<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>appdaemon on Derek Rose: A how to guide for overthiking things.</title><link>https://dereksrose.com/tags/appdaemon/</link><description>Recent content in appdaemon on Derek Rose: A how to guide for overthiking things.</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 27 Jun 2021 15:09:54 -0700</lastBuildDate><atom:link href="https://dereksrose.com/tags/appdaemon/index.xml" rel="self" type="application/rss+xml"/><item><title>MrHomn</title><link>https://dereksrose.com/posts/mrhomn/</link><pubDate>Sun, 27 Jun 2021 15:09:54 -0700</pubDate><guid>https://dereksrose.com/posts/mrhomn/</guid><description>&lt;h1 id="my-new-home-automation-plan">My new home automation plan&lt;/h1>
&lt;figure
style="width: 70%;"
>
&lt;a
data-lightbox="image-/images/mrhomn/mrhomn1.jpg"
href="https://dereksrose.com/images/mrhomn/mrhomn1.jpg"
title=" "
>
&lt;img
src="https://dereksrose.com/images/mrhomn/mrhomn1.jpg"
/>
&lt;/a>
&lt;/figure>
&lt;p>When I decided to leave my job of over 15 years I knew that I wanted a bit of a career rewind. The last several years have seen me in full-time management positions and my programming, sysadmin, and SRE skills have gotten rusty. Since I learn by doing I wanted a project that would get me up-to-date and which I&amp;rsquo;d have fun implementing.&lt;/p>
&lt;p>&lt;a href="https://github.com/Bishma/MrHomn">MrHomn&lt;/a> is the 3rd generation of my home automation setup&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. Which I plan to expand out to utilize common open source tools all operating in a docker-compose stack.&lt;/p>
&lt;h2 id="stack-elements">Stack Elements&lt;/h2>
&lt;figure
style="width: 70%;"
>
&lt;a
data-lightbox="image-/images/mrhomn/diagram.png"
href="https://dereksrose.com/images/mrhomn/diagram.png"
title=" The Planned Tech Stack&amp;amp;hellip; vaguely"
>
&lt;img
src="https://dereksrose.com/images/mrhomn/diagram.png"
/>
&lt;/a>
&lt;figcaption>
The Planned Tech Stack&amp;hellip; vaguely
&lt;/figcaption>
&lt;/figure>
&lt;h3 id="synology">Synology&lt;/h3>
&lt;p>I&amp;rsquo;ll be using my &lt;a href="https://www.synology.com/en-us">Diskstation&lt;/a> as my storage pool, docker host, and backup agent.&lt;/p>
&lt;h3 id="hass">hass&lt;/h3>
&lt;p>&lt;a href="https://www.home-assistant.io/">Home Assistant&lt;/a> is the brain of the setup. It provides the UI&amp;rsquo;s, device integrations, data recording, state tracking, events, and more.&lt;/p>
&lt;h3 id="sql_db">sql_db&lt;/h3>
&lt;p>I&amp;rsquo;ve gone with &lt;a href="https://mariadb.org/">MariaDB&lt;/a> for now. Home Assistant makes use of &lt;a href="https://www.sqlalchemy.org/">SQLAcadamy&lt;/a> which opens up a lot of DB options. At some point I may have more specific needs but for now the versatility of MariaDB seems like a good choice.&lt;/p>
&lt;h3 id="appdaemon">appdaemon&lt;/h3>
&lt;p>&lt;a href="https://appdaemon.readthedocs.io/en/latest/">AppDaemon&lt;/a> is a great way to incorporate loosely coupled Python apps with home assistant. Most critically this is how I&amp;rsquo;ll be creating my APIs to Home Assistant. My existing alexa skill connects to an &lt;a href="https://appdaemon.readthedocs.io/en/latest/AD_API_REFERENCE.html#alexa">appdaemon api&lt;/a> which makes use of &lt;code>sql_db&lt;/code>.&lt;/p>
&lt;h3 id="nginx">nginx&lt;/h3>
&lt;p>Initially, at least, I&amp;rsquo;m going to need a public API to support my Alexa skill. &lt;a href="https://www.nginx.com/">Nginx&lt;/a> is how I&amp;rsquo;ll be handling internal and external routing within my stack.&lt;/p>
&lt;h2 id="near-future-goals">Near Future Goals&lt;/h2>
&lt;h4 id="monitoring">Monitoring&lt;/h4>
&lt;p>I&amp;rsquo;m currently weighing &lt;a href="https://prometheus.io/">Prometheus&lt;/a> vs &lt;a href="https://www.zabbix.com/">Zabbix&lt;/a>. I&amp;rsquo;d learn more implementing Prometheus but it&amp;rsquo;s overkill for this project.&lt;/p>
&lt;h4 id="log-management">Log Management&lt;/h4>
&lt;p>TBD, but I&amp;rsquo;m leaning toward &lt;a href="https://hub.docker.com/r/graylog/graylog">Greylog&lt;/a>.&lt;/p>
&lt;h4 id="rum-and-synthetics">RUM and Synthetics&lt;/h4>
&lt;p>This is running on my local network. I&amp;rsquo;m not going to have enough traffic for these to be of any use but it is one of the things I&amp;rsquo;d like to grain some practical experience with. ¯\_(ツ)_/¯&lt;/p>
&lt;h3 id="data-analysis">Data Analysis&lt;/h3>
&lt;h4 id="timeseries_db">timeseries_db&lt;/h4>
&lt;p>SQL is well and good, but if you want to evaluate trends you want to be able to query for timeseries data. I am planning to use &lt;a href="https://www.influxdata.com/">InfluxDB&lt;/a>.&lt;/p>
&lt;p>I&amp;rsquo;d&amp;rsquo; likely make use of InfluxDB as the storage backend for Prometheus.&lt;/p>
&lt;h4 id="grafana">Grafana&lt;/h4>
&lt;p>&lt;a href="https://grafana.com/">Grafana&lt;/a> is a solid visualization platform that is common use. Understanding it at more than basic level will pay dividends.&lt;/p>
&lt;h3 id="purpose-built-sensors">Purpose built sensors&lt;/h3>
&lt;p>It has been decades since I did anything with hobbyist electronics and I intend to make the time to relearn it. I intend to use ESP modules and simple sensors anywhere I can figure out how to power them. I&amp;rsquo;d like to sample the temp and humidity in each space of my house. I&amp;rsquo;d like to add CO&lt;sub>2&lt;/sub>, Lux, dB, and in key areas. And I also want some manner particulate sensor(s) in my attic due to local wildfires. For added fun I can 3D Print each sensors&amp;rsquo; housing.&lt;/p>
&lt;figure
style="width: 60%;"
>
&lt;a
data-lightbox="image-/images/mrhomn/arduino-example.png"
href="https://dereksrose.com/images/mrhomn/arduino-example.png"
title=" Photo from"
>
&lt;img
src="https://dereksrose.com/images/mrhomn/arduino-example.png"
/>
&lt;/a>
&lt;figcaption>
&lt;a href="https://www.circuitbasics.com/how-to-set-up-the-dht11-humidity-sensor-on-an-arduino/">Photo from&lt;/a>
&lt;/figcaption>
&lt;/figure>
&lt;p>Additionally I&amp;rsquo;m planning to build an RPi based outdoor weather station.&lt;/p>
&lt;h4 id="esphome">ESPHome&lt;/h4>
&lt;p>Those purpose built sensors have to tell someone what they sense. That someone is &lt;a href="https://github.com/esphome/esphome">ESPHome&lt;/a> which I plan to deploy in the &lt;a href="https://hub.docker.com/r/esphome/esphome">docker&lt;/a> stack.&lt;/p>
&lt;h3 id="telegram-chatbot">Telegram Chatbot&lt;/h3>
&lt;p>My goal is to be able to duplicate a natural language interface for both voice assistants and telegram. Telegram has the extra benefit of being able to present options as buttons.&lt;/p>
&lt;h3 id="no-hardware-requiring-the-cloud">No hardware requiring the cloud&lt;/h3>
&lt;p>I&amp;rsquo;ve got a number of devices in my current home automation that require a cloud provider. I want to limit, if not eliminate this weakness. First it means that if the internet is out then my house is degraded. It means that I&amp;rsquo;m reliant on these companies to keep their services online and open enough for home assistant integrations to work with them. Also, I want my data and I want to stop giving so much of it away. Frankly I don&amp;rsquo;t think any of these companies properly compensate us for the wealth of data we expose.&lt;/p>
&lt;h4 id="voice-assistant">Voice Assistant&lt;/h4>
&lt;p>The little bit of research that I&amp;rsquo;ve done so far suggests that the weak point in the realm of open/local voice assistants is wake work detection. Every time an OSS project starts to get close it gets snapped up by companies looking to compete with Amazon and Google.&lt;/p>
&lt;p>All of that is to say that I want to replace Alexa. I&amp;rsquo;ll be doing various experiments to see how viable it is.&lt;/p>
&lt;h4 id="doorbell">Doorbell&lt;/h4>
&lt;p>I&amp;rsquo;m hearing that the &lt;a href="https://amcrest.com/smarthome-2-megapixel-wireless-doorbell-security-camera-1920-x-1080p-wifi-doorbell-camera-ip55-weatherproof-two-way-audio-ad110.html">Amcrest wifi doorbell&lt;/a> is decent hardware with a terrible app to back it up. But it has the big plus of not being cloud based. I can mimic alerting with Home Assistant + Telegram Bot, unfortunately that won&amp;rsquo;t replicate intercom functionality. There&amp;rsquo;s enough chance that we won&amp;rsquo;t be happy with the end result that I&amp;rsquo;m not willing to spend the money on one yet.&lt;/p>
&lt;p>We have a couple Amcrest PTZ cameras connected to home assistant via &lt;a href="https://www.synology.com/en-us/surveillance">Synology Surveillance Station&lt;/a>.&lt;/p>
&lt;h3 id="pytorch">PyTorch&lt;/h3>
&lt;h4 id="nvidia-jetson">Nvidia Jetson&lt;/h4>
&lt;p>This is a very affordable device that should be capable of keeping up with the tiny amount of learning and inference I&amp;rsquo;ll &amp;ldquo;need&amp;rdquo; for my house.&lt;/p>
&lt;h4 id="face-detection">Face detection&lt;/h4>
&lt;p>If we have non-cloud door cams I can have MrHome only send notifications if it identifies a human in the camera&amp;rsquo;s view when a motion detection triggers, avoiding some false positives. And if I can get it to recognize &lt;del>my many enemies&lt;/del> friends then I can &lt;del>launch countermeasures&lt;/del> play harp music&amp;hellip; or something.&lt;/p>
&lt;h4 id="routine-detection">Routine Detection&lt;/h4>
&lt;p>This is a half-baked idea at this point; I&amp;rsquo;d like to have MrHomn be able to do something like:&lt;/p>
&lt;ul>
&lt;li>Detect a recurring change to my day-to-day routine&lt;/li>
&lt;li>Generate an automation change proposal based on the new behavior&lt;/li>
&lt;li>Send a Telegram message to suggest the change&lt;/li>
&lt;li>Implement the change if approved&lt;/li>
&lt;/ul>
&lt;p>E.g. &amp;ldquo;I&amp;rsquo;ve noticed you&amp;rsquo;re going to bed later recently. Would you like me to delay your pre-bedtime automation by 30 minutes?&amp;rdquo;&lt;/p>
&lt;hr>
&lt;figure
style="width: 60%;"
>
&lt;a
data-lightbox="image-/images/mrhomn/mrhomn2.jpg"
href="https://dereksrose.com/images/mrhomn/mrhomn2.jpg"
title=" "
>
&lt;img
src="https://dereksrose.com/images/mrhomn/mrhomn2.jpg"
/>
&lt;/a>
&lt;/figure>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>OK, yes, I promised, after naming my second home automation repo &amp;ldquo;&lt;a href="https://github.com/Bishma/home-assistant-tng">HomeAssistant TNG&lt;/a>,&amp;rdquo; that I&amp;rsquo;d name my next one &amp;ldquo;Deep Space Nine.&amp;rdquo; But &lt;a href="https://memory-alpha.fandom.com/wiki/Homn">MrHomn&lt;/a> was too good to pass up.&lt;/p>
&lt;p>He was &lt;a href="https://memory-alpha.fandom.com/wiki/Lwaxana_Troi">Lwaxana Troy&amp;rsquo;s&lt;/a> very diligent valet in Star Trek TNG, three syllable wake words tend to work best for VUIs, &lt;a href="https://en.wikipedia.org/wiki/Carel_Struycken">Carel Struycken&lt;/a> is awesome, and Homn is a homonym of home (at least the way Lwaxana pronounced it).&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Codename: Bad Janet</title><link>https://dereksrose.com/posts/codename-bad-janet/</link><pubDate>Sun, 03 Nov 2019 11:11:53 -0800</pubDate><guid>https://dereksrose.com/posts/codename-bad-janet/</guid><description>&lt;h1 id="a-better-alexa-skill">A Better Alexa Skill&lt;/h1>
&lt;p>In 2016 I was given a 1st gen Echo Dot and I immediately sought to integrate it with &lt;a href="https://www.home-assistant.io/">Home Assistant&lt;/a>. The quick way to so at the time was via the Philips Hue Bridge which allowed simple on/off control of devices. Over time more of my home was being controlled by Home Assistant and just turning things on and off wasn&amp;rsquo;t enough.&lt;/p>
&lt;p>I could achieve most of what I wanted using custom intent scripts. This allowed me to have nicer grammar when interacting with things like my media center, gave me the ability to pass variables to Home Assistant (like &amp;ldquo;turn up the volume &lt;em>two times&lt;/em>&amp;rdquo;), and allowed me to get &lt;a href="https://www.home-assistant.io/docs/configuration/templating/">jinja templated&lt;/a> responses. Fast forward to 2019 and I think you can do most, if not all, of this with &lt;a href="https://www.nabucasa.com/">Nabu Casa&lt;/a> + template sensors + Alexa routines. But at the time it was the most direct means to get what I wanted.&lt;/p>
&lt;p>Now I want more. I want to be able to do fallbacks, have multi-step intents, do slot confirmations, and just generally have a good VUI. The most personally interesting way to approach this is to learn python and make use of &lt;a href="https://appdaemon.readthedocs.io/en/latest/">AppDaemon&lt;/a> to build a full featured Alexa API. I&amp;rsquo;ll take a stepwise approach to achieving this, starting with trying to feature match my existing system with a few needed upgrades.&lt;/p>
&lt;h2 id="minimum-viable-product">Minimum Viable Product&lt;/h2>
&lt;h3 id="on--off-for-all-devices">On / Off For All Devices&lt;/h3>
&lt;p>This was an interesting and entirely unnecessary problem to solve. We can do this outside of my skill because we also use Nabu Casa and the home assistant skill. I choose to duplicate the functionality as a personal challenge and because we get into the habit of invoking the skill and forget that the basics aren&amp;rsquo;t part of it.&lt;/p>
&lt;p>This presented the problem of needing to get a device registry to Alexa. I didn&amp;rsquo;t want to have to hard-code any devices into my intent slots and &lt;a href="https://developer.amazon.com/docs/smapi/catalog-url-reference.html">Catalog Management&lt;/a> was more involved than I wanted to get for something only a couple people will use. I understand there are additional options if you make a skill that&amp;rsquo;s the &amp;ldquo;home automation&amp;rdquo; type but I didn&amp;rsquo;t investigate that very far because those need to be hosted in AWS Lambda, and I want to keep things local.&lt;/p>
&lt;p>In the end I used a Search Query slot and then have my AppDaemon app search Home Assistant for the unbounded phrase. This will be the first place that I want to add validation and/or confirmation. Here is what is is able to search and control.&lt;/p>
&lt;h4 id="example-phrases">Example Phrases&lt;/h4>
&lt;ul>
&lt;li>turn/switch {device} on&lt;/li>
&lt;li>turn/switch {device} off&lt;/li>
&lt;/ul>
&lt;p>Where {device} can be:&lt;/p>
&lt;ul>
&lt;li>All smart switches&lt;/li>
&lt;li>All smart lights&lt;/li>
&lt;li>All groups
&lt;ul>
&lt;li>Fixtures with multiple bulbs.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The living room media center
&lt;ul>
&lt;li>Turns on by starting the Plex activity in Harmony.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The living room stand fan
&lt;ul>
&lt;li>Toggle&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The Bedroom AC
&lt;ul>
&lt;li>Toggle&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="dynamic-updown">Dynamic Up/Down&lt;/h3>
&lt;p>Turn things up or down by a dynamic amount. This will default to 1 if no value is specified.&lt;/p>
&lt;h4 id="example-phrases-1">Example Phrases&lt;/h4>
&lt;ul>
&lt;li>turn {device} up&lt;/li>
&lt;li>turn {device} down twice&lt;/li>
&lt;li>turn {device} up by {increment}.&lt;/li>
&lt;/ul>
&lt;p>Where {device} can be:&lt;/p>
&lt;ul>
&lt;li>The TV
&lt;ul>
&lt;li>A.K.A. The Bose Soundbar&lt;/li>
&lt;li>Synonyms: The Television, The Volume, The Television Volume&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The Fan
&lt;ul>
&lt;li>This is the living room stand fan (if out).&lt;/li>
&lt;li>Speed only goes up, then loops to the beginning after the highest speed.&lt;/li>
&lt;li>Synonyms: The Stand Fan, The Living Room Fan&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The Thermostat
&lt;ul>
&lt;li>Synonyms: The Heat, Ecobee&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The Bedroom AC
&lt;ul>
&lt;li>This will only work if the AC is already turned on and I don&amp;rsquo;t currently have a state detection for it.&lt;/li>
&lt;li>Synonyms: The Bedroom Air Conditioner, The Bedroom AC Temperature, The Bedroom Air Conditioned Temperature&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Increment can be any integer value (though I will probably add bounds to this)&lt;/p>
&lt;h3 id="media-control">Media control&lt;/h3>
&lt;p>Control the base functions of the media center. These can all be triggered any number of more time. These won&amp;rsquo;t work for the record player or &amp;ldquo;over the air.&amp;rdquo;&lt;/p>
&lt;h4 id="example-phrases-2">Example phrases:&lt;/h4>
&lt;p>These will all work followed by &amp;ldquo;the tv,&amp;rdquo; &amp;ldquo;,the television&amp;rdquo;, or &amp;ldquo;the living room tv / television.&amp;rdquo;&lt;/p>
&lt;ul>
&lt;li>{action} the television&lt;/li>
&lt;li>{action} the tv twice.&lt;/li>
&lt;li>{action} the tv {increment} times&lt;/li>
&lt;/ul>
&lt;p>Where {action} can be:&lt;/p>
&lt;ul>
&lt;li>Confirm
&lt;ul>
&lt;li>Synonyms: Okay, Yes, Go&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Fast forward (10 seconds)
&lt;ul>
&lt;li>Synonyms: Go Forward, Skip Ahead&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Rewind (also 10 seconds)
&lt;ul>
&lt;li>Synonyms: Go Backward, Go Backwards&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Play
&lt;ul>
&lt;li>Synonym: Unpause&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Pause&lt;/li>
&lt;li>Stop
&lt;ul>
&lt;li>Synonyms: Back, Cancel&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Skip Back (1 minute)
&lt;ul>
&lt;li>ToDo: This will work whether followed by &amp;ldquo;tv&amp;rdquo; or &amp;ldquo;television&amp;rdquo; or not.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="media-switch">Media Switch&lt;/h3>
&lt;p>Switching between Harmony activities.&lt;/p>
&lt;h4 id="example">Example&lt;/h4>
&lt;ul>
&lt;li>Switch to {activity}&lt;/li>
&lt;li>Change to {activity}&lt;/li>
&lt;li>Make {activity} go now&lt;/li>
&lt;/ul>
&lt;p>Where {activity} can be:&lt;/p>
&lt;ul>
&lt;li>Amazon
&lt;ul>
&lt;li>Synonym: Amazon Prime&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Hulu&lt;/li>
&lt;li>Kodi&lt;/li>
&lt;li>Over the Air
&lt;ul>
&lt;li>Synonyms: OTA, Antenna&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Plex&lt;/li>
&lt;li>Record Player
&lt;ul>
&lt;li>Synonyms: Records, Bluetooth,&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Spotify
&lt;ul>
&lt;li>Synonyms: Music&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Switch
&lt;ul>
&lt;li>Synonyms: Nintendo, Nintendo Switch, Console&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Sling&lt;/li>
&lt;li>Netflix&lt;/li>
&lt;/ul>
&lt;h3 id="command-phrases">Command Phrases&lt;/h3>
&lt;p>There are certain things we want to be able to trigger without a slot. These have analogs that as Alexa Routines but are also avilable in the skill because we often forget.&lt;/p>
&lt;h4 id="phrases">Phrases&lt;/h4>
&lt;ul>
&lt;li>skip back
&lt;ul>
&lt;li>Is also a media command, so &amp;ldquo;skip back the tv&amp;rdquo; will also work.&lt;/li>
&lt;li>Performs a 60 second rewind in all video based Harmony activities.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="the-project">The Project&lt;/h2>
&lt;p>It&amp;rsquo;s not very sophistocated yet, so it&amp;rsquo;s all in &lt;a href="https://github.com/Bishma/home-assistant-tng/blob/master/appdaemon/apps/alexa.py">this one appdaemon app&lt;/a>.&lt;/p></description></item><item><title>Appdaemon Logging</title><link>https://dereksrose.com/posts/appdaemon-logging/</link><pubDate>Mon, 22 Jul 2019 18:33:18 -0800</pubDate><guid>https://dereksrose.com/posts/appdaemon-logging/</guid><description>&lt;h1 id="combined-logging-between-home-assistant-and-appdaemon">Combined logging between Home Assistant and AppDaemon&lt;/h1>
&lt;p>I&amp;rsquo;ve begun using &lt;a href="https://appdaemon.readthedocs.io/en/latest/">AppDaemon&lt;/a> apps to extend &lt;a href="https://www.home-assistant.io/">Home Assistant&lt;/a>. It&amp;rsquo;s a way to write sandboxed &lt;a href="https://www.python.org/">Python&lt;/a> apps that have access to &lt;a href="https://www.home-assistant.io/">home-assistant&lt;/a> events, devices, services, and presence. It&amp;rsquo;s intended to be replacement for automations that can leverage all the power of python. You can also use it as a way to create sensors in Home Assistant.&lt;/p>
&lt;p>My &lt;a href="https://github.com/Bishma/home-assistant-tng/blob/master/appdaemon/apps/lunch-schedule.py">first foray&lt;/a> into AppDaemon (and the Python Language) makes use of an API we have at work to read our next three lunch menus and turn them into a Home Assistant sensor. If lunch is being served the sensor will contain what&amp;rsquo;s for lunch. There is also an attribute on the sensor containing the next three days&amp;rsquo; menus. I then wrote a &lt;a href="https://github.com/Bishma/custom-lovelace-cards/tree/master/list-item-card">crude custom lovelace card&lt;/a> to display that on my frontend.&lt;/p>
&lt;p>&lt;img src="https://dereksrose.com/images/appdaemon-logging_1-custom-card.png" alt="Custom card displaying attributes from an Appdaemon Sensor">&lt;/p>
&lt;p>In working through this I found that needing to keep track of multiple logs was tedious. And since I&amp;rsquo;m using &lt;a href="https://www.home-assistant.io/hassio/">Hass.io&lt;/a> with the &lt;a href="https://github.com/hassio-addons/addon-log-viewer">LogViewer&lt;/a> addon, I&amp;rsquo;d like my AppDaemon app logs to be visible there. After a lucky find in the &lt;a href="https://community.home-assistant.io/t/adding-logs-from-appdaemon-to-the-main-home-assistant-log/105722">Home Assistant Forums&lt;/a> I was able to piece together what I wanted.&lt;/p>
&lt;h4 id="step-1">Step 1:&lt;/h4>
&lt;p>I need to use the home assistant &lt;a href="https://www.home-assistant.io/integrations/python_script/">python script component&lt;/a> to expose a generic logging service. I can use the resulting service in AppDaemon to pass logs into Home Assistant for logging.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;message&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;No message provided&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Send to the appropriate log level&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">received_level&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;level&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lower&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="n">received_level&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;debug&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">debug&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">elif&lt;/span> &lt;span class="n">received_level&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;warning&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">warning&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">elif&lt;/span> &lt;span class="n">received_level&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;error&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This accepts a message and an optional level. If no level is passed it logs as INFO. This is saved in &lt;code>&amp;lt;config&amp;gt;/python_scripts/log.py&lt;/code>. Once this is added (and Home Assistant restarted with the python script component enabled) I have a service called &lt;code>python_script.log&lt;/code>.&lt;/p>
&lt;h4 id="step-2">Step 2&lt;/h4>
&lt;p>Fine grained &lt;a href="https://www.home-assistant.io/components/logger/">logger&lt;/a> configs allow me to keep my Home Assistant logs outputting at my desired level (warning) while allowing me to turn things that come through my new &lt;code>python_script.log&lt;/code> service all the way to debug when I&amp;rsquo;m developing a new AppDaemon app.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># &amp;#34;The logger component lets you define the level of logging activities in Home Assistant.&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># https://www.home-assistant.io/components/logger/&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">logger&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">default&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">warning&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">logs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">homeassistant.components.python_script.log.py&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">debug&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Each call to the &lt;code>python_script.log&lt;/code> service will generate a log at the info level. Having a default log level of warning here has the benefit of not showing my all my AppDaemon logs twice.&lt;/p>
&lt;h4 id="step-3">Step 3&lt;/h4>
&lt;p>AppDaemon has the means to register a listener on all calls to self.log in all running AppDaemon apps. To do this you want to set up a stand-alone log handling AppDaemon app.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">appdaemon.plugins.hass.hassapi&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">hass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">LogBridge&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Hass&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">initialize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">listen_log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cb&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">cb&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ts&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">level&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">msg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;[AppDaemon] &lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s2">: &lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">call_service&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;python_script/log&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">level&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">level&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The callback (&lt;code>cb&lt;/code>) formats a message for readability and then passes that and the level to the Home Assistant &lt;code>python_script.log&lt;/code> service created above. Save this in the apps directory as &lt;code>log_bridge.yaml&lt;/code>.&lt;/p>
&lt;h4 id="step-4">Step 4&lt;/h4>
&lt;p>Register this script as an AppDaemon app in &lt;code>apps.yaml&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">log_bridge&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">module&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">log_bridge&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">class&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">LogBridge&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After a reboot every log line from AppDaemon pipes into home assistant.&lt;/p></description></item></channel></rss>