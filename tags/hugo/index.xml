<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hugo on Derek Rose: A how to guide for overthiking things.</title><link>https://dereksrose.com/tags/hugo/</link><description>Recent content in hugo on Derek Rose: A how to guide for overthiking things.</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 19 Feb 2023 20:23:53 -0800</lastBuildDate><atom:link href="https://dereksrose.com/tags/hugo/index.xml" rel="self" type="application/rss+xml"/><item><title>Comment Toots</title><link>https://dereksrose.com/posts/comment-toots/</link><pubDate>Sun, 19 Feb 2023 20:23:53 -0800</pubDate><guid>https://dereksrose.com/posts/comment-toots/</guid><description>&lt;h2 id="hahahugoshortcode-s0-hbhb">An attempt to power blog comments with Mastodon&lt;/h2>
&lt;img align="left" src="https://dereksrose.com/images/comment-toots/mastodon-derek.png" width="280" hspace="25">
&lt;p>Well, I guess I&amp;rsquo;ve landed on
&lt;a href="https://mas.to/@bishma" target="_blank">Mastodon&lt;/a> since the bird started shitting everywhere. I was resistant since I don&amp;rsquo;t think it can ever be the real-time discovery engine that Twitter was (at its best). But, seeing as I spent an afternoon linking Mastodon threads as a comment system for this
&lt;a href="https://gohugo.io/" target="_blank">Hugo&lt;/a> blog, I guess the choice has been made.&lt;/p>
&lt;p>The downside to this setup is that it requires some editing every time I want to have comments on a post. To enabled comments on a post I need to&lt;/p>
&lt;ul>
&lt;li>Publish the post to my blog&lt;/li>
&lt;li>Wait for it to deploy&lt;/li>
&lt;li>Write a toot about it&lt;/li>
&lt;li>Get the ID of that Toot&lt;/li>
&lt;li>Edit the post adding the TootID to it&lt;/li>
&lt;li>Wait for it to redeploy&lt;/li>
&lt;/ul>
&lt;p>Hopefully I&amp;rsquo;ll find a way to automate some or all of this process with
&lt;a href="https://github.com/features/actions" target="_blank">Github Actions&lt;/a>. But that&amp;rsquo;s a problem for future Derek. And that guy&amp;rsquo;s a jerk.&lt;/p>
&lt;p>This whole concept isn&amp;rsquo;t my idea, this is just my take on it. I stumbled on this idea by
&lt;a href="https://carlschwan.eu/2020/12/29/adding-comments-to-your-static-blog-with-mastodon/" target="_blank">Carl Schwan&lt;/a> while looking for something else entirely. It&amp;rsquo;s pretty straight forward; A bit of extra YAML each post&amp;rsquo;s
&lt;a href="https://gohugo.io/content-management/front-matter/" target="_blank">Front Matter&lt;/a> plus a bit of js, css, and html hacked into my
&lt;a href="https://github.com/lxndrblz/anatole" target="_blank">theme&lt;/a>. I restyled a number of things and made it so that comments automatically lazy-load, rather than requiring the visitor to click a button. For anyone following along, if you see me reference my &lt;code>anatole/&lt;/code> directory replace that with the directory of your theme. It should be set up in a similar way, but your milage may vary.&lt;/p>
&lt;h3 id="step-1-editing-the-post-head-file">Step 1: Editing the post head file&lt;/h3>
&lt;p>Mastodon pulls page information from it Open Graph tags. At the time I got it, my theme didn&amp;rsquo;t have Open Graph incorporated (it does now). Of course, I&amp;rsquo;ve done so much hacking at things that I don&amp;rsquo;t dare update for one simple issue like this. Hugo already provides an open graph partial, so I just needed to
&lt;a href="https://github.com/Bishma/blog/commit/7517756515fbe09d236f76e164b9e91ccf8b20a7" target="_blank">add&lt;/a> it to the &lt;code>anatole/layouts/partials/head.html&lt;/code> file.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-golang" data-lang="golang">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{{&lt;/span> &lt;span class="nx">template&lt;/span> &lt;span class="s">&amp;#34;_internal/opengraph.html&amp;#34;&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="p">}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The same &lt;code>head.html&lt;/code> needs to load the CSS for my comments, so I
&lt;a href="https://github.com/Bishma/blog/commit/78b61e93c1eae6f01b32bdc7e92f45c7e3d3fb5d" target="_blank">added that&lt;/a> in the file while I was in there. More about CSS specifics later, for now what you need to know is that we&amp;rsquo;re going to reference a css file that we&amp;rsquo;ll be creating inside the Anatole theme. We also Minify it and Fingerprint in the process. The file itself was put in the theme as &lt;code>anatole/assets/js/mastodonComments.css&lt;/code>. Get the
&lt;a href="https://github.com/Bishma/blog/blob/master/themes/anatole/assets/css/mastodonComments.css" target="_blank">latest version of my CSS&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">{{ $mastodonCommentStyle := resources.Get &amp;#34;css/mastodonComments.css&amp;#34; | resources.Minify | resources.Fingerprint }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">link&lt;/span> &lt;span class="na">rel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;stylesheet&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;{{ $mastodonCommentStyle.Permalink }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">integrity&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;{{ $mastodonCommentStyle.Data.Integrity }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">crossorigin&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;anonymous&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text/css&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="step-2-adding-front-matter">Step 2: Adding Front Matter&lt;/h3>
&lt;p>Each Hugo post/page has a small section of YAML (I use YAML, TOML is an option) that defines all the meta data about the post. This is where were going to tell the post how to find the right Toot to use as that post&amp;rsquo;s comment thread. This needs to be added somewhere in the YAML block.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">comments&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">host&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;lt;mastodon server I&amp;#39;m signed up on&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">username&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;lt;my username on that server&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The YAML above was also added to my default post template page located in &lt;code>/archetypes/default.md&lt;/code> so that it would be available automatically on all my future posts.&lt;/p>
&lt;h3 id="step-3-the-comments-partial">Step 3: The Comments Partial&lt;/h3>
&lt;p>All the interesting bits are on the comments partial. This was placed inside my theme&amp;rsquo;s partials directory &lt;code>anatole/layouts/partials/comments.html&lt;/code>. You can find the latest version of my &lt;code>comments.html&lt;/code> partial
&lt;a href="https://github.com/Bishma/blog/blob/master/themes/anatole/layouts/partials/comments.html" target="_blank">here&lt;/a>.&lt;/p>
&lt;h4 id="details-of-commentshtml-partial">Details of comments.html partial&lt;/h4>
&lt;p>Replying isn&amp;rsquo;t straight forward with this solution. People need a Mastodon account (somewhere) and then they need to post a reply &lt;strong>from&lt;/strong> it. What Corl did in his solution was to add a dialog that would pop up and explain things to people. I didn&amp;rsquo;t didn&amp;rsquo;t want to have to style that modal so I just made it inline text that displays below the Comments subheader, provided there is a toot idea present in the posts Front Matter. If there is no Toot ID in the post&amp;rsquo;s front matter, this paragraph will be hidden.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-golang" data-lang="golang">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{{&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">not&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="p">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">p&lt;/span> &lt;span class="nx">style&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s">&amp;#34;display: hidden;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{{&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{{&lt;/span> &lt;span class="nx">end&lt;/span> &lt;span class="p">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">You&lt;/span> &lt;span class="nx">can&lt;/span> &lt;span class="nx">use&lt;/span> &lt;span class="nx">your&lt;/span> &lt;span class="nx">Mastodon&lt;/span> &lt;span class="nx">account&lt;/span> &lt;span class="nx">to&lt;/span> &lt;span class="nx">reply&lt;/span> &lt;span class="nx">to&lt;/span> &lt;span class="nx">this&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="nx">class&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s">&amp;#34;link&amp;#34;&lt;/span> &lt;span class="nx">href&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s">&amp;#34;https://{{ .host }}/@{{ .username }}/{{ .id }}&amp;#34;&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s">&amp;#34;_blank&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">post&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">&amp;gt;.&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">br&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Or&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="nx">href&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s">&amp;#34;#&amp;#34;&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s">&amp;#34;copyButton&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">copy&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nx">and&lt;/span> &lt;span class="nx">paste&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nx">post&lt;/span> &lt;span class="nx">URL&lt;/span> &lt;span class="nx">into&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nx">search&lt;/span> &lt;span class="nx">field&lt;/span> &lt;span class="nx">of&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nx">Mastodon&lt;/span> &lt;span class="nx">client&lt;/span> &lt;span class="nx">of&lt;/span> &lt;span class="nx">your&lt;/span> &lt;span class="nx">choice&lt;/span>&lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>copyButton&lt;/code> href above has an onclick listener further down the page. It will copy my full mastodon link (sourced from the post&amp;rsquo;s Front Matter) to their clipboard. And it gives a thumbs up for 2 seconds to show it worked.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;copyButton&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">navigator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">clipboard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">writeText&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;https://{{ .host }}/@{{ .username }}/{{ .id }}&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">preventDefault&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Save the original
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">$cpLk&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;#copyButton&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">originalText&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">$cpLk&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">text&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">originalText&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Change the text for 2 seconds
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">$cpLk&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;👍&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">setTimeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$cpLk&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">originalText&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="mi">2000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When it came to having Toots loaded onto a post, I wanted to remove the need to click. Caaarl used a UI button to let users trigger comment loading themselves, but I&amp;rsquo;m not a god that believes in free will. So I load the comments by a lazy-load instead, which triggers 100px from the bottom of the page. I pull in the Toot ID from the page&amp;rsquo;s Front Matter, and if it&amp;rsquo;s empty it will say comments are disabled.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// If comments havent been loaded yet, load them when the user scrolls to within 100px of the bottom of the page
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">limitBottom&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">documentElement&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">offsetHeight&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">innerHeight&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">commentsLoaded&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;scroll&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 3 conditions
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 1. The user has scrolled to within 100px of the bottom of the page
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 2. Comments have not been loaded yet
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 3. The post has a Mastodon ID (from Params.comments)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">documentElement&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scrollTop&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="nx">limitBottom&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nx">commentsLoaded&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="s1">&amp;#39;{{ .id }}&amp;#39;&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">loadComments&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">commentsLoaded&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;{{ .id }}&amp;#39;&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;mastodon-comments-list&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">innerHTML&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;em&amp;gt;Comments are disabled for this post.&amp;lt;/em&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once the comments partial is
&lt;a href="https://github.com/Bishma/blog/blob/master/themes/anatole/layouts/partials/comments.html" target="_blank">downloaded&lt;/a> to the correct directory in the template, the partial can be called from inside the single page layout (in &lt;code>anatole/layouts/single.html&lt;/code>). Just above the footer content I
&lt;a href="https://github.com/Bishma/blog/commit/5f1b177ad9d3b65e084e899ff63b103f81b8b137" target="_blank">added&lt;/a> a test to make sure we&amp;rsquo;re in a blog post, inside of which is a call to the partial.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-golang" data-lang="golang">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{{&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">eq&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="nx">Type&lt;/span> &lt;span class="s">&amp;#34;posts&amp;#34;&lt;/span>&lt;span class="p">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{{&lt;/span> &lt;span class="nx">partial&lt;/span> &lt;span class="s">&amp;#34;comments.html&amp;#34;&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="p">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{{&lt;/span> &lt;span class="nx">end&lt;/span> &lt;span class="p">}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we need to style and js things.&lt;/p>
&lt;h3 id="step-4-css-and-js-the-terror-twins">Step 4: CSS and JS, the terror twins&lt;/h3>
&lt;p>Most of you looking at this blog instinctively know that I&amp;rsquo;m a backend guy. I&amp;rsquo;m a lot happier working with IaaS, than I am working with CSS. But since no one joined by dial-in BBS, here we are.&lt;/p>
&lt;p>First I need a 3rd party JS library called
&lt;a href="https://github.com/cure53/DOMPurify/blob/main/dist/purify.js" target="_blank">DOMPurify&lt;/a>. It&amp;rsquo;s used to sanitize each reply toot to catch anything injecty or XSSy coming through. I downloaded the latest version and put it in my theme&amp;rsquo;s js directory, &lt;code>anatole/asset/js&lt;/code>. It gets called by the comments partial discussed above.&lt;/p>
&lt;p>We also need the CSS that was mentioned above. I already downloaded it and it&amp;rsquo;s called from inside the comments partial discussed above. It is clumsy AF but it gets the job done. It styles the commenters avatar, display name, and username along with their comments. I may not like everyone&amp;rsquo;s avatars being on my site, so this it the place to tweak that display.&lt;/p>
&lt;h3 id="step-5-post-this-and-see-what-happens">Step 5: Post this and see what happens.&lt;/h3>
&lt;p>We&amp;rsquo;ll see how long this takes to break or how soon I realize that testing in FF and Chrome in a single OS is not sufficient.&lt;/p>
&lt;p>Really this is just a toy that kept me busy for around a day. But I had fun and I learned more about Hugo in the process.&lt;/p></description></item></channel></rss>